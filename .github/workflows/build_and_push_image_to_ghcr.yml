name: Build and Push Docker image @ghcr.io
description: Build and push Docker image to GitHub Container Registry (ghcr.io)

on:
  workflow_call:
    inputs:
      base_image_name:
        description: "Base image name to use for the build (e.g., python)"
        required: true
        type: string
      base_image_tag:
        description: "Base image tag to use for the build (e.g., 3.12.2-slim)"
        required: true
        type: string
      image_name:
        description: "Name of the image to build (e.g., python-base)"
        required: true
        type: string
      image_tags:
        description: "Comma-separated list of tags to apply to the image (e.g., 3.12.2-slim, latest)"
        required: true
        type: string


jobs:

  build_and_test:
    name: Test image ${{ inputs.image_name }}:${{ inputs.base_image_tag }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build local image to test
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          build-args: |
            BASE_IMAGE_NAME=${{ inputs.base_image_name }}
            BASE_IMAGE_TAG=${{ inputs.base_image_tag }}
          tags: local/image

      - name: Test local image
        run: |
          docker run --rm \
            -v $(pwd)/:/home/user/build/ \
            -e IMAGE_TAGS="${{ inputs.image_tags }}" \
            local/image bash \
            -c "cd build && ./scripts/test.sh"

  build_and_push:
    name: Push image ${{ inputs.image_name }}:${{ inputs.image_tags }} @ghcr.io
    runs-on: ubuntu-latest
    needs: build_and_test
    if: ${{ success() }}
    permissions:
      contents: read
      packages: write
    concurrency:
      group: "${{ github.repository_id }}-build-and-push"

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Setup Docker metadata
        id: setup_metadata
        run: |

          readarray -td, image_tags <<<"${{ inputs.image_tags }},"; unset 'image_tags[-1]';
          for image_tag in "${image_tags[@]}"; do
            trimmed_tag=$(echo "$image_tag" | xargs)
            META_TAGS+="type=raw,value=${trimmed_tag}\n"
            DELETE_TAGS=${DELETE_TAGS:+$DELETE_TAGS,}${trimmed_tag}
          done

          # META_TAGS contains a list of meta tags to be applied to the image.
          echo "meta_tags<<EOF" >> $GITHUB_OUTPUT
          echo -e "$META_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # DELETE_TAGS contains a comma-separated list of image tags to be deleted from the GitHub Container Registry.
          echo "delete_tags=$DELETE_TAGS" >> $GITHUB_OUTPUT

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/${{ inputs.image_name }}
          tags: |
            ${{ steps.setup_metadata.outputs.meta_tags}}
          flavor: |
            latest=false

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete old image @ghcr.io
        uses: dataaxiom/ghcr-cleanup-action@v1
        continue-on-error: true
        with:
          package: "${{ inputs.image_name }}"
          delete-tags: ${{ steps.setup_metadata.outputs.delete_tags}}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BASE_IMAGE_NAME=${{ inputs.base_image_name }}
            BASE_IMAGE_TAG=${{ inputs.base_image_tag }}

